#define PI 3.14159
#define FasterSampling

//Input
float gBlurRadius;

//Handled by CPU side
int screen_width;
int screen_height;
int PassNum;
int CurFrame;
float4x4 ViewProj;
float4x4 CamInvProj;
float4x4 CameraToWorld;

#ifdef FasterSampling
    static const float3 SamplePoissionDisk6[ 6 ] =
    {//From Nvidia ReBLUR
        // https://www.desmos.com/calculator/e5mttzlg6v
        float3( -0.50 * sqrt(3.0) , -0.50             , exp(-0.66f * 1.0f) ),
        float3(  0.00             ,  1.00             , exp(-0.66f * 1.0f) ),
        float3(  0.50 * sqrt(3.0) , -0.50             , exp(-0.66f * 1.0f) ),
        float3(  0.00             , -0.30             , exp(-0.66f * 0.09f) ),
        float3(  0.15 * sqrt(3.0) ,  0.15             , exp(-0.66f * 0.09f) ),
        float3( -0.15 * sqrt(3.0) ,  0.15             , exp(-0.66f * 0.09f) ),
    };
    #define DiskSamples SamplePoissionDisk6
    #define DiskCount 6
#else
    static const float3 SamplePoissionDisk8[ 8 ] =
    {//From Nvidia ReBLUR
        // https://www.desmos.com/calculator/abaqyvswem
        float3( -1.00             ,  0.00             ,  exp(-0.66f * 1.0f)),
        float3( -0.25 * sqrt(2.0) ,  0.25 * sqrt(2.0) , exp(-0.66f * 0.25f) ),
        float3(  0.00             ,  1.00             , exp(-0.66f * 1.0f) ),
        float3(  0.25 * sqrt(2.0) , -0.25 * sqrt(2.0) , exp(-0.66f * 0.25f) ),
        float3(  1.00             ,  0.00             , exp(-0.66f * 1.0f)),
        float3(  0.25 * sqrt(2.0) ,  0.25 * sqrt(2.0) , exp(-0.66f * 0.25f)),
        float3(  0.00             , -1.00             , exp(-0.66f * 1.0f)),
        float3( -0.25 * sqrt(2.0) , -0.25 * sqrt(2.0) , exp(-0.66f * 0.25f))
    };
    #define DiskSamples SamplePoissionDisk8
    #define DiskCount 8
#endif

SamplerState my_linear_clamp_sampler;
Texture2D<float2> MotionVectors;

//Inputs
Texture2D<float4> IncommingIrradiance;
Texture2D<half4> Albedo;
Texture2D<half> CurDepth;
Texture2D<float4> GeometricNormal;
Texture2D<float4> SurfaceNormal;
Texture2D<float2> MetallicRoughness;


//Internal textures
RWTexture2D<half> SSAOWrite;
Texture2D<half> SSAORead;

RWTexture2D<uint2> NormA;
Texture2D<uint2> NormB;

RWTexture2D<half4> HFA;
Texture2D<half4> HFB;
Texture2D<half4> HFPrev;

RWTexture2D<half> BlurHintsWrite;
Texture2D<half> BlurHints;
Texture2D<half> PrevDepth;

//Output texture
RWTexture2D<float4> Output;

//Compression functions
inline uint packUnormArb(float3 data2) {
    data2 = (data2 + 1.0f) * 0.5f;
    uint3 shifted = uint3(data2 * 1023.0f + 0.5) << uint3(0, 10, 20);
    return shifted.x | shifted.y | shifted.z;
}

inline float3 unpackUnormArb(const uint pack) {
    uint3 unshifted = pack >> uint3(0, 10, 20);
    unshifted = unshifted & 1023;
    return normalize((float3(unshifted.xyz) * 1.0 / 1023.0f) * 2.0f - 1.0f);
}

//Random functions
uint hash_with(uint seed, uint hash) {
    seed = (seed ^ 61) ^ hash;
    seed += seed << 3;
    seed ^= seed >> 4;
    seed *= 0x27d4eb2d;
    return seed;
}
uint pcg_hash(uint seed) {
    uint state = seed * 747796405u + 2891336453u;
    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    return (word >> 22u) ^ word;
}

float2 random(uint samdim, int2 id) {
    uint hash = pcg_hash(((id.x + id.y * screen_width) * (uint)112 + samdim));
    const static float one_over_max_unsigned = asfloat(0x2f7fffff);
    float x = hash_with(CurFrame, hash) * one_over_max_unsigned;
    float y = hash_with(CurFrame + 0xdeadbeef, hash) * one_over_max_unsigned;
    return float2(x, y);
}

inline float luminance(in float3 color) {
    return dot(color, float3(0.299, 0.587, 0.114));
}


#pragma kernel DataPackKernel

[numthreads(32,32,1)]
void DataPackKernel (uint3 id : SV_DispatchThreadID) {
    if(id.x > screen_width) return;
    int pixel_index = id.y * screen_width + id.x;
    BlurHintsWrite[id.xy] = ((MetallicRoughness[id.xy].x > 0.1f) ? MetallicRoughness[id.xy].y : 1);//if metallic is greater than 0.1, Hints equals the roughness, else it equals 1
    NormA[id.xy] = uint2(packUnormArb(GeometricNormal[id.xy].xyz), packUnormArb(SurfaceNormal[id.xy].xyz));
    float3 Col = IncommingIrradiance[id.xy].xyz;
    if(Albedo[id.xy].w == 0) Col = 0;
    HFA[id.xy] = float4(Col, 0);
}

#pragma kernel BlurKernel

[numthreads(16,16,1)]
void BlurKernel (uint3 id : SV_DispatchThreadID) {
    float CenterDepth = CurDepth[id.xy];
    float3 CentNorm = unpackUnormArb(NormB[id.xy].y);
    float4 Center = HFB[id.xy];
    int AccumFrames = Center.w;
    float CenterLum = luminance(Center);
    float sum_w = 1;

    float angle = random(53, id.xy).x * 2.0f * PI;
    float2 angs = float2(cos(angle), sin(angle));
    const float2x2 rotationMatrix = float2x2(angs.xy, -angs.y, angs.x);

    float boost = 1.0f - smoothstep(8.0f+1e-6, 16.0f+2e-6, AccumFrames);

    float blurRadius = gBlurRadius * ( 1.0 + 2.0 * boost ) / 3.0;

    float SSAOMin = SSAORead[id.xy];
    for(int j = -1; j <= 1; j++) {
        for(int k = -1; k <= 1; k++) {
            if(j == 0 && k == 0) continue;
            SSAOMin = min(SSAOMin, SSAORead[id.xy + int2(j, k)]);
        }
    }
    const float Hints = BlurHints[id.xy];
    if(Hints == 1) blurRadius *= lerp(0.1f, 1.0f, SSAOMin);
    if(Hints > 0.05f && Hints < 0.4f) blurRadius *= Hints;
    blurRadius += 1.0;

    float2 BlurRadius = blurRadius * rcp(float2(screen_width, screen_height));

    float2 uv = (id.xy + 0.5f) / (float2(screen_width, screen_height));
    uv += (random(64, id.xy) - 0.5f) * rcp(float2(screen_width, screen_height));//jitter

    [unroll]for(int i = 0; i < DiskCount; i++) {
        float3 offset = DiskSamples[i];
        float w = offset.z;
        float2 uvoffset = mul(rotationMatrix, offset.xy) * BlurRadius;
        
        float2 OffsetUV = uv + uvoffset;
        if(any(OffsetUV > 1 || OffsetUV < 0)) continue;

        float sampleDepth = CurDepth.SampleLevel(my_linear_clamp_sampler, OffsetUV, 0);
        float3 norm = unpackUnormArb(NormB[OffsetUV * float2(screen_width, screen_height)].y);
        float4 Sample = HFB.SampleLevel(my_linear_clamp_sampler, OffsetUV, 0);

        float DepthFactor = exp2((AccumFrames > 7 ? -100.0f : -10.0f) * abs(1.0f - (CenterDepth / sampleDepth)));//bunch of arbitrary values I found through trial and error
        float NormFactor = pow(max(0, dot(CentNorm, norm)),64);
        w *= clamp(NormFactor * DepthFactor,0, 1);

        if(AccumFrames > 4) w *= pow(exp(-abs(CenterLum - luminance(Sample.xyz)) / (PassNum == 2 ? 4.0f : 1.0f)),max((min(Sample.w - 4, 4)) / (1.0f + CenterLum * 4.0f), 1));

        Center +=  Sample * w;
        sum_w += w;
    }
    if(sum_w != 0) Center *= rcp(sum_w);

    HFA[id.xy] = float4(Center.xyz, AccumFrames);
}



#pragma kernel FastTemporalKernel

[numthreads(8,8,1)]
void FastTemporalKernel (uint3 id : SV_DispatchThreadID) {
    float2 motion = -MotionVectors.SampleLevel(my_linear_clamp_sampler, id.xy / float2(screen_width, screen_height), 0).xy;

    float2 pos_prev = ((((float2(id.xy)+0.5f) * float2(rcp(screen_width), rcp(screen_height)) + motion) * float2(screen_width, screen_height)));

    float depth_curr = CurDepth[id.xy];

    float3 normal_curr = unpackUnormArb(NormA[id.xy].x);

    bool temporal_sample_valid_diff = false;
    float4 temporal_color_hf = 0;
    float temporal_sum_w_diff = 0.0;

    float2 pos_ld = floor(pos_prev - 0.5);
    float2 subpix = frac(pos_prev - 0.5 - pos_ld);
    {

        // Bilinear/bilateral filter
        static const int2 off[4] = { { 0, 0 }, { 1, 0 }, { 0, 1 }, { 1, 1 } };
        const float w[4] = {
            (1.0 - subpix.x) * (1.0 - subpix.y),
            (subpix.x) * (1.0 - subpix.y),
            (1.0 - subpix.x) * (subpix.y),
            (subpix.x) * (subpix.y)
        };
        [unroll]for (int i = 0; i < 4; i++) {
            int2 p = int2(pos_ld)+off[i];

            if (p.x < 0 || p.x >= screen_width || p.y >= screen_height) continue;

            float depth_prev =  PrevDepth[p];
            float3  normal_prev = unpackUnormArb(NormB[p].x);
            
            float dist_depth = (abs(depth_curr - depth_prev)) / abs(depth_curr);
            float dot_normals = dot(normal_curr, normal_prev);
        
            if (dist_depth < 0.1 && dot_normals > 0.8)
            {
                float w_diff = w[i] * max(dot_normals, 0);

                temporal_color_hf += HFPrev[p] * w_diff;
                temporal_sum_w_diff += w_diff;
            }
        }

        // We found some relevant surfaces - good
        if (temporal_sum_w_diff > 1e-6)
        {
            float inv_w_diff = 1.0 / temporal_sum_w_diff;
            temporal_color_hf *= inv_w_diff;
            temporal_sample_valid_diff = true;
        }
    }

    int AccumFrames = min(temporal_color_hf.w,12);

    if(!temporal_sample_valid_diff) AccumFrames = 0;

    AccumFrames++;

    float3 col = lerp(temporal_color_hf, HFA[id.xy].xyz, rcp(AccumFrames));

    HFA[id.xy] = float4(col, AccumFrames);
}


#pragma kernel SlowTemporalKernel

[numthreads(16,16,1)]
void SlowTemporalKernel (uint3 id : SV_DispatchThreadID) {
    float2 motion = -MotionVectors.SampleLevel(my_linear_clamp_sampler, id.xy / float2(screen_width, screen_height), 0).xy;

    float2 pos_prev = ((((float2(id.xy)+0.5f) * float2(rcp(screen_width), rcp(screen_height)) + motion) * float2(screen_width, screen_height)));

    float3 Center = HFB[id.xy];
    float depth_curr = CurDepth[id.xy];
    float3 normal_curr = unpackUnormArb(NormA[id.xy].x);
    
    {//Modified RCRS/Antifirefly
        float3 MaxLum = -9999.0f;
        float3 MinLum = 9999.0f;
        [unroll]for(int i = -1; i <= 1; i++) {
            [unroll]for(int j = -1; j <= 1; j++) {
                if(i == 0 && j == 0) continue;
                float3 Lum = min(HFB[id.xy + int2(i, j) * 2.0f].xyz, HFB[id.xy + int2(i, j) * 4.0f].xyz);
                MaxLum = max(Lum, MaxLum);
                MinLum = min(Lum, MinLum);
            }   
        }
        float CentLum = luminance(Center);
        float newLum = clamp(CentLum, luminance(MinLum), luminance(MaxLum));
        if(CentLum != 0) Center *= newLum / CentLum;
        else Center = MinLum;
    }

    bool temporal_sample_valid_diff = false;
    float4 temporal_color_hf = 0;
    float temporal_sum_w_diff = 0.0;

    float2 pos_ld = floor(pos_prev - 0.5);
    float2 subpix = frac(pos_prev - 0.5 - pos_ld);
    {
        // Bilinear/bilateral filter
        static const int2 off[4] = { { 0, 0 }, { 1, 0 }, { 0, 1 }, { 1, 1 } };
        const float w[4] = {
            (1.0 - subpix.x) * (1.0 - subpix.y),
            (subpix.x) * (1.0 - subpix.y),
            (1.0 - subpix.x) * (subpix.y),
            (subpix.x) * (subpix.y)
        };
        [unroll]for (int i = 0; i < 4; i++) {
            int2 p = int2(pos_ld)+off[i];

            if (p.x < 0 || p.x >= screen_width || p.y >= screen_height) continue;

            float depth_prev =  PrevDepth[p];
            float3  normal_prev = unpackUnormArb(NormB[p].x);
            
            float dist_depth = (abs(depth_curr - depth_prev)) / abs(depth_curr);
            float dot_normals = dot(normal_curr, normal_prev);

            if (dist_depth < 0.1 && dot_normals > 0.8)
            {
                float w_diff = w[i] * max(dot_normals, 0);

               temporal_color_hf += HFPrev[p] * w_diff;
                temporal_sum_w_diff += w_diff;
            }
        }

        // We found some relevant surfaces - good
        if (temporal_sum_w_diff > 1e-6)
        {
            float inv_w_diff = 1.0 / temporal_sum_w_diff;
            temporal_color_hf *= inv_w_diff;
            temporal_sample_valid_diff = true;
        }
    }

    float AccumFrames = min(HFPrev[pos_prev].w,60);
    if(!temporal_sample_valid_diff || any(pos_prev < 0 || pos_prev > float2(screen_width, screen_height))) AccumFrames = 0;

    if(AccumFrames > 10) AccumFrames *= lerp(0.1f, 1, pow(exp2(-abs(luminance((temporal_color_hf)) - luminance((Center)))),1));
    AccumFrames++;
    Center = lerp(temporal_color_hf, Center, min(rcp(AccumFrames),1));

    HFA[id.xy] = float4(Center, AccumFrames);
    
    float4 AlbedoVal = Albedo[id.xy];
    if(AlbedoVal.w == 0) Output[id.xy] = AlbedoVal;
    else Output[id.xy] = float4(Center * AlbedoVal.xyz, 1);
}

#pragma kernel SSAO

float2 sample_disc(float u1, float u2) {
    float a = 2.0f * u1 - 1.0f;
    float b = 2.0f * u2 - 1.0f;
    if (a == 0.0f) a = 0.00001;
    if (b == 0.0f) b = 0.00001;

    float phi, r;
    if (a * a > b * b) {
        r = a;
        phi = (0.25f * PI) * (b / a);
    }
    else {
        r = b;
        phi = (0.25f * PI) * (a / b) + (0.5f * PI);
    }

    float sin_phi, cos_phi;
    sincos(phi, sin_phi, cos_phi);

    return float2(r * cos_phi, r * sin_phi);
}

float3 sample_cosine_weighted_direction(float u1, float u2) {
    float2 d = sample_disc(u1, u2);
    return float3(d.x, d.y, sqrt(abs(1.0f - dot(d, d))));
}

float3x3 GetTangentSpace(float3 normal) {
    float3 helper = float3(1, 0, 0);
    if (abs(normal.x) > 0.99f) helper = float3(0, 0, 1);
    float3 tangent = normalize(cross(normal, helper));
    float3 binormal = cross(normal, tangent);
    return float3x3(tangent, binormal, normal);
}

float3 CreateCameraRay(float2 uv, out float3 origin) {
    // Transform the camera origin to world space
    origin = mul(CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    // Invert the perspective projection of the view-space position
    float3 direction = mul(CamInvProj, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    return direction;
}

[numthreads(16,16,1)]
void SSAO (uint3 id : SV_DispatchThreadID) {//3 sample SSAO with 6 steps per sample max
    const float3x3 NormTan = GetTangentSpace(unpackUnormArb(NormB[id.xy].x));
    float3 Origin;
    float2 uv = id.xy / float2(screen_width, screen_height);
    float Depth = CurDepth.SampleLevel(my_linear_clamp_sampler, uv, 0);
    float3 Dir = CreateCameraRay(uv * 2.0f - 1.0f, Origin);
    float3 CentPos = Dir * Depth + Origin;
    float3 MainPos = 0;
    float Falses = 0;
    [unroll]for(int i = 0; i < 3; i++) {
        MainPos = CentPos;
        float2 rand = random(53 + i, id.xy);
        float3 direction = normalize(mul(sample_cosine_weighted_direction(rand.x,rand.y), NormTan)) * 0.1f;
        MainPos += direction * random(43 + i, id.xy).x * 0.1f;
        [unroll]for(int j = 0; j < 6; j++) {
            MainPos += direction * clamp(pow((j + 1) / 6.0f,2), 0, 1);
            float4 curprojectedrefl = mul(ViewProj, float4(MainPos, 1));
            float2 UV = (curprojectedrefl.xy / curprojectedrefl.w * 0.5f + 0.5f);
            if(any(UV > 1 || UV < 0)) break;
            Depth = length(MainPos - Origin);
            float depthdiff = Depth - CurDepth.SampleLevel(my_linear_clamp_sampler, UV, 0);
            if(depthdiff >= 0 && depthdiff < 0.4f) {
                Falses += smoothstep(0.4f, 0, depthdiff);
                break;
            }
        }
    }
    SSAOWrite[id.xy] = pow(1.0f - Falses / 3.0f,2);
}

#pragma kernel SSAOFilter

[numthreads(8,8,1)]
void SSAOFilter (uint3 id : SV_DispatchThreadID)
{
    float3 CentNorm = unpackUnormArb(NormB[id.xy].x);
    float CentDepth = CurDepth[id.xy];
    float SSAOAccum = SSAORead[id.xy];
    float wsum = 1;
    for(int i = -1; i <= 1; i++) {
        for(int j = -1; j <= 1; j++) {
            if(i == 0 && j == 0) continue;
            int2 OffsetIndex = id.xy + int2(i,j) * 2.0f;
            float DepthFactor = exp2(-200.0f * abs(1.0f - (CentDepth / CurDepth[OffsetIndex])));
            float NormFactor = max(0, dot(CentNorm, unpackUnormArb(NormB[OffsetIndex])));
            NormFactor *= NormFactor;
            NormFactor *= NormFactor;
            float w = DepthFactor * NormFactor;
            SSAOAccum += SSAORead[OffsetIndex] * w;
            wsum += w;
        }
    }
    SSAOWrite[id.xy] = SSAOAccum / max(wsum, 1e-5);
}
